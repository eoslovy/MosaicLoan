services:
  member-service:
    container_name: member-service
    build:
      context: ./back/member-service
      dockerfile: Dockerfile
    image: ${DOCKERHUB_USERNAME:-recreatekang}/mosaic-member-service:${IMAGE_TAG:-latest}
    restart: always
    env_file:
      - 환경변수.env
    ports:
      - "18081:8080"

  account-service:
    container_name: account-service
    build:
      context: ./back/account-service
      dockerfile: Dockerfile
    image: ${DOCKERHUB_USERNAME:-recreatekang}/mosaic-account-service:${IMAGE_TAG:-latest}
    restart: always
    env_file:
      - 환경변수.env
    
    ports:
      - "18082:8080"

  contract-service:
    container_name: contract-service
    build:
      context: ./back/contract-service
      dockerfile: Dockerfile
    image: ${DOCKERHUB_USERNAME:-recreatekang}/mosaic-contract-service:${IMAGE_TAG:-latest}
    restart: always
    env_file:
      - 환경변수.env
    
    ports:
      - "18083:8080"
  credit-service:
    container_name: credit-service
    build:
      context: ./back/credit-service
      dockerfile: Dockerfile
    image: ${DOCKERHUB_USERNAME:-recreatekang}/mosaic-credit-service:${IMAGE_TAG:-latest}
    restart: always
    env_file:
      - 환경변수.env
    
    ports:
      - "18084:8080"
  mydata-service:
    container_name: mydata-service
    build:
      context: ./back/mydata-service
      dockerfile: Dockerfile
    image: ${DOCKERHUB_USERNAME:-recreatekang}/mosaic-mydata-service:${IMAGE_TAG:-latest}
    restart: always
    env_file:
      - 환경변수.env
    
    ports:
      - "18085:8080"

  frontend-react:
    build:
      context: ./front
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_CREDIT_WEBSOCKET_URL: ${NEXT_PUBLIC_CREDIT_WEBSOCKET_URL}

    image: ${DOCKERHUB_USERNAME:-recreatekang}/mosaic-frontend:${IMAGE_TAG:-latest}
    env_file:
      - 환경변수.env
    profiles:
      - build-only
    ports:
      - "80:80"


  springcloud-gateway:
    container_name: springcloud-gateway
    build:
      context: ./infra/springcloud-gateway
      dockerfile: Dockerfile
    image: ${DOCKERHUB_USERNAME:-recreatekang}/mosaic-springcloud-gateway:${IMAGE_TAG:-latest}
    restart: always
    env_file:
      - 환경변수.env
    ports:
      - "8080:8080"

  frontend-nginx:
    container_name: nginx
    build:
      context: ./infra/nginx
      dockerfile: Dockerfile
      args:
        FRONTEND_IMAGE: ${DOCKERHUB_USERNAME:-recreatekang}/mosaic-frontend:${IMAGE_TAG:-latest}
        NGINX: local_nginx.conf
    image: ${DOCKERHUB_USERNAME:-recreatekang}/mosaic-nginx:${IMAGE_TAG:-latest}
    restart: always
    env_file:
      - 환경변수.env
    ports:
      - "80:80"
    volumes:
      - /etc/letsencrypt/live/j12a608.p.ssafy.io/fullchain.pem:/etc/letsencrypt/live/j12a608.p.ssafy.io/fullchain.pem  # 인증서
      - /etc/letsencrypt/live/j12a608.p.ssafy.io/privkey.pem:/etc/letsencrypt/live/j12a608.p.ssafy.io/privkey.pem  # 개인 키

  redis:
    container_name: redis
    build:
      context: ./infra/redis
      dockerfile: Dockerfile
    env_file:
      - 환경변수.env
    image: ${DOCKERHUB_USERNAME:-recreatekang}/mosaic-redis:${IMAGE_TAG:-latest}
    restart: always
    ports:
      - "6379:6379"

  zookeeper:
    container_name: zookeeper
    build:
      context: ./infra/zookeeper
      dockerfile: Dockerfile
    env_file:
      - 환경변수.env
    image: ${DOCKERHUB_USERNAME:-recreatekang}/mosaic-zookeeper:${IMAGE_TAG:-latest}
    restart: always
    ports:
      - "2181:2181"

  kafka:
    container_name: kafka
    image: ${DOCKERHUB_USERNAME:-recreatekang}/mosaic-kafka:${IMAGE_TAG:-latest}
    restart: always
    build:
      context: ./infra/kafka
      dockerfile: Dockerfile
    ports:
      - "9092:9092"      # 내부용 (다른 컨테이너용)
      - "29092:29092"    # 외부용 (GUI용)
    env_file:
      - 환경변수.env
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://host.docker.internal:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - ALLOW_PLAINTEXT_LISTENER=yes

  member-db:
    container_name: member-db
    build:
      context: ./infra/rdbms/member
      dockerfile: Dockerfile
      args:
        MEMBER_DATASOURCE_URL: ${MEMBER_SCHEMA}
        MEMBER_DATASOURCE_USERNAME: ${MEMBER_DATASOURCE_USERNAME}
        MEMBER_DATASOURCE_PASSWORD: ${MEMBER_DATASOURCE_PASSWORD}
    image: ${DOCKERHUB_USERNAME:-recreatekang}/mosaic-member-db:${IMAGE_TAG:-latest}
    restart: always
    env_file:
      - 환경변수.env
    environment:
      DATABASE_URL: ${MEMBER_DATASOURCE_URL}
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: ${MEMBER_DATASOURCE_USERNAME}
      MYSQL_PASSWORD: ${MEMBER_DATASOURCE_PASSWORD}
      #ENV MYSQL_DATABASE=mosaic_account
    ports:
      - "3307:3306"
    volumes:
      - ./infra/rdbms/member/member_inserts.sql:/opt/init-sql/insert.sql
      - member-db-data:/var/lib/mysql

  account-db:
    container_name: account-db
    build:
      context: ./infra/rdbms/account
      dockerfile: Dockerfile
      args:
        ACCOUNT_DATASOURCE_URL: ${ACCOUNT_SCHEMA}
        ACCOUNT_DATASOURCE_USERNAME: ${ACCOUNT_DATASOURCE_USERNAME}
        ACCOUNT_DATASOURCE_PASSWORD: ${ACCOUNT_DATASOURCE_PASSWORD}
    env_file:
      - 환경변수.env
    environment:
      DATABASE_URL: ${ACCOUNT_DATASOURCE_URL}
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: ${ACCOUNT_DATASOURCE_USERNAME}
      MYSQL_PASSWORD: ${ACCOUNT_DATASOURCE_PASSWORD}
    image: ${DOCKERHUB_USERNAME:-recreatekang}/mosaic-account-db:${IMAGE_TAG:-latest}
    restart: always
    ports:
      - "3308:3306"
    volumes:
      - ./infra\rdbms\account\account_inserts.sql:/opt/init-sql/insert.sql
      - account-db-data:/var/lib/mysql

  contract-db:
    container_name: contract-db
    build:
      context: ./infra/rdbms/contract
      dockerfile: Dockerfile
      args:
        CONTRACT_DATASOURCE_URL: ${CONTRACT_SCHEMA}
        CONTRACT_DATASOURCE_USERNAME: ${CONTRACT_DATASOURCE_USERNAME}
        CONTRACT_DATASOURCE_PASSWORD: ${CONTRACT_DATASOURCE_PASSWORD}
    env_file:
      - 환경변수.env
    environment:
      DATABASE_URL: ${CONTRACT_DATASOURCE_URL}
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: ${CONTRACT_DATASOURCE_USERNAME}
      MYSQL_PASSWORD: ${CONTRACT_DATASOURCE_PASSWORD}
    image: ${DOCKERHUB_USERNAME:-recreatekang}/mosaic-contract-db:${IMAGE_TAG:-latest}
    restart: always
    ports:
      - "3309:3306"
    volumes:
      - contract-db-data:/var/lib/mysql

  mydata-db:
    container_name: mydata-db
    build:
      context: ./infra/rdbms/mydata
      dockerfile: Dockerfile
      args:
        MYDATA_DATASOURCE_URL: ${MYDATA_SCHEMA}
        MYDATA_DATASOURCE_USERNAME: ${MYDATA_DATASOURCE_USERNAME}
        MYDATA_DATASOURCE_PASSWORD: ${MYDATA_DATASOURCE_PASSWORD}
    env_file:
      - 환경변수.env
    environment:
      DATABASE_URL: ${MYDATA_DATASOURCE_URL}
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: ${MYDATA_DATASOURCE_USERNAME}
      MYSQL_PASSWORD: ${MYDATA_DATASOURCE_PASSWORD}
    image: ${DOCKERHUB_USERNAME:-recreatekang}/mosaic-mydata-db:${IMAGE_TAG:-latest}
    restart: always
    ports:
      - "3310:3306"
    volumes:
      - ./infra/rdbms/mydata/credit_data.sql:/opt/init-sql/credit_data.sql
      - mydata-db-data:/var/lib/mysql
  credit-db:
    container_name: credit-db
    build:
      context: ./infra/rdbms/credit
      dockerfile: Dockerfile
      args:
        CREDIT_DATASOURCE_URL: ${CREDIT_SCHEMA}
        CREDIT_DATASOURCE_USERNAME: ${CREDIT_DATASOURCE_USERNAME}
        CREDIT_DATASOURCE_PASSWORD: ${CREDIT_DATASOURCE_PASSWORD}
    env_file:
      - 환경변수.env
    environment:
      DATABASE_URL: ${CREDIT_DATASOURCE_URL}
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: ${CREDIT_DATASOURCE_USERNAME}
      MYSQL_PASSWORD: ${CREDIT_DATASOURCE_PASSWORD}
    image: ${DOCKERHUB_USERNAME:-recreatekang}/mosaic-credit-db:${IMAGE_TAG:-latest}
    restart: always
    ports:
      - "3311:3306"
    volumes:
      - credit-db-data:/var/lib/mysql

volumes:
  member-db-data:
    driver: local
  account-db-data:
    driver: local
  contract-db-data:
    driver: local
  mydata-db-data:
    driver: local
  credit-db-data:
    driver: local